{"ast":null,"code":"import _classCallCheck from \"/Users/stephensimko/Desktop/Clicky-Game/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/stephensimko/Desktop/Clicky-Game/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/stephensimko/Desktop/Clicky-Game/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/stephensimko/Desktop/Clicky-Game/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/stephensimko/Desktop/Clicky-Game/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/stephensimko/Desktop/Clicky-Game/my-app/src/components/Main.js\";\nimport React from 'react';\nimport Card from './Card';\nimport Nav from './Nav';\nimport Jumbotron from './Jumbotron';\n\nvar Main =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Main, _React$Component);\n\n  function Main(props) {\n    var _this;\n\n    _classCallCheck(this, Main);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Main).call(this, props));\n\n    _this.shuffle = function (array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex; // While there remain elements to shuffle...\n\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1; // And swap it with the current element.\n\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      ;\n      return array;\n    };\n\n    _this.componentDidMount = function () {\n      _this.setState({\n        cards: _this.shuffle(_this.state.cards)\n      });\n    };\n\n    _this.handleRestart = function () {\n      //If score is larger than highscore, set highscore equal to score\n      if (_this.state.score > _this.state.highScore) {\n        _this.setState({\n          highScore: _this.state.score\n        });\n      }\n\n      ; //reset score and shuffle cards\n\n      _this.setState({\n        score: 0,\n        cards: _this.shuffle(_this.state.cards)\n      }); //copy current card array\n\n\n      var newCardsState = _this.state.cards;\n\n      _this.state.cards.forEach(function (value, index) {\n        //update copied card array\n        newCardsState[index].clicked = false; //update state to reflect copied card array\n\n        _this.setState({\n          cards: newCardsState\n        });\n      });\n    };\n\n    _this.handleClick = function (id) {\n      if (_this.state.cards[id].clicked) {\n        _this.handleRestart();\n      } else {\n        var newCardsState = _this.state.cards;\n        var newScoreState = _this.state.score + 1;\n        newCardsState[id].clicked = true;\n\n        _this.setState({\n          cards: newCardsState,\n          score: newScoreState\n        });\n\n        _this.setState({\n          cards: _this.shuffle(_this.state.cards)\n        });\n      }\n\n      ;\n    };\n\n    _this.state = {};\n    _this.state.cards = _this.props.cards;\n    _this.state.score = 0;\n    _this.state.highScore = 0;\n    return _this;\n  }\n\n  _createClass(Main, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Nav, {\n        score: this.state.score,\n        highScore: this.state.highScore,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, this.state.cards.map(function (value, index) {\n        return React.createElement(Card, {\n          key: index,\n          handleClick: _this2.handleClick,\n          src: value.src,\n          alt: value.alt,\n          id: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        });\n      })))));\n    }\n  }]);\n\n  return Main;\n}(React.Component);\n\n;\nexport default Main;","map":{"version":3,"sources":["/Users/stephensimko/Desktop/Clicky-Game/my-app/src/components/Main.js"],"names":["React","Card","Nav","Jumbotron","Main","props","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","componentDidMount","setState","cards","state","handleRestart","score","highScore","newCardsState","forEach","value","index","clicked","handleClick","id","newScoreState","map","src","alt","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Card from './Card';\nimport Nav from './Nav';\nimport Jumbotron from './Jumbotron';\n\nclass Main extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {};\n    this.state.cards = this.props.cards;\n    this.state.score = 0;\n    this.state.highScore = 0;\n  };\n\n  shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    };\n\n    return array;\n  };\n\n  componentDidMount = () => {\n    this.setState({cards:this.shuffle(this.state.cards)});\n  };\n\n  handleRestart = () => {\n    //If score is larger than highscore, set highscore equal to score\n    if (this.state.score > this.state.highScore){\n      this.setState({highScore:this.state.score})\n    };\n    //reset score and shuffle cards\n    this.setState({score:0, cards:this.shuffle(this.state.cards)});\n\n    //copy current card array\n    const newCardsState = this.state.cards;\n\n    this.state.cards.forEach((value, index) => {\n      //update copied card array\n      newCardsState[index].clicked = false;\n      //update state to reflect copied card array\n      this.setState({cards:newCardsState});\n    });\n  }\n\n  handleClick = (id) => {\n    if(this.state.cards[id].clicked){\n      this.handleRestart();\n    }else{\n      const newCardsState = this.state.cards;\n      const newScoreState = this.state.score + 1;\n      newCardsState[id].clicked = true;\n      this.setState({cards:newCardsState, score: newScoreState});\n    this.setState({cards:this.shuffle(this.state.cards)});\n    };\n  };\n\n  render() {\n    return(\n      <React.Fragment>\n        <Nav score={this.state.score} highScore={this.state.highScore}></Nav>\n        <Jumbotron></Jumbotron>\n        <div className='container'>\n          <div className='row'>\n            <div className='col-12'>\n              {this.state.cards.map((value, index) => <Card key={index} handleClick={this.handleClick} src={value.src} alt={value.alt} id={index}></Card> )}\n            </div>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  };\n};\n\nexport default Main;"]},"metadata":{},"sourceType":"module"}